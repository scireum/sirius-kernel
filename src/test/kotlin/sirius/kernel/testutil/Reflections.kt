/*
 * Made with all the love in the world
 * by scireum in Remshalden, Germany
 *
 * Copyright by scireum GmbH
 * http://www.scireum.de - info@scireum.de
 */

package sirius.kernel.testutil

import java.lang.reflect.InvocationTargetException

/**
 * Provides a helper for reflection operations in tests.
 */
class Reflections {
    companion object {
        /**
         * Fetches and executes a function via reflection on the given instance.
         *
         * @param instance used to call the function on
         * @param functionName of the function which is about to be called
         * @param args the arguments used to call the function. No argument may be null!
         * @return the result of the called function
         * @throws any execption which may be called by the given function
         */
        fun <T : Any> callPrivateMethod(instance: T, functionName: String, vararg args: Any): Any? {
            try {
                val function = instance.javaClass.getDeclaredMethod(functionName, *args.map { it.javaClass }.toTypedArray())
                function.trySetAccessible()
                return function.invoke(instance, *args)
            } catch (e: InvocationTargetException) {
                // unwrap exception generated by reflection function call
                e.cause?.let { throw it }
            }
            return null
        }
    }
}
